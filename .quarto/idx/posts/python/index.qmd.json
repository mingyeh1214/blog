{"title":"Hello, Python","markdown":{"yaml":{"title":"Hello, Python","subtitle":"Python 教學","date":"6/13/2023","date-modified":"6/13/2023","date-format":"YYYY-MM-DD","author":"Bennie Liu","abstract":"Python基礎","highlight-style":"pygments","code-block-border-left":"#31BAE9","format":{"html":{"code-fold":false,"code-tools":true,"code-link":true,"code-line-numbers":true,"toc":true,"toc-title":"文件內容","number-sections":true,"df-print":"paged","html-math-method":"katex"}},"execute":{"echo":true,"warning":false},"editor":"visual"},"headingText":"Python資料型態","containsRefs":false,"markdown":"\n\n[Complete-Python-3-Bootcamp](https://github.com/Pierian-Data/Complete-Python-3-Bootcamp)\n\n\n| Type                     | Description      |\n|--------------------------|------------------|\n| int                      | 1                |\n| float                    | 2.3              |\n| str                      | 'hello'          |\n| list (ordered)           | \\[1, 'hello'\\]   |\n| dict (unordered)         | {'key': 'value'} |\n| tup (ordered, immutable) | (1, 'hello')     |\n| set (unordered, unique)  | {1, 'hello'}     |\n| bool                     | True or False    |\n\n## Number\n\n```{python}\n5 / 2\n5 % 2\n2 ** 3\n```\n\n## 查詢變數資料型態\n\n```{python}\nfloat = 1.0\ntype(float)\n```\n\n## string\n\n```{python}\nstr = 'hello'\nlen(str)\n```\n\n```{python}\nstr[0]\n```\n\n```{python}\nstr[1]\n```\n\n```{python}\nstr[-1]\n```\n\n```{python}\nstr[2:]\n```\n\n```{python}\nstr[:2]\n```\n\n```{python}\nstr[2:4]\n```\n\n```{python}\nstr[::2]\n```\n\n```{python}\nstr[::-1] # 反轉字串\n```\n\n```{python}\nstr.upper()\n```\n\n```{python}\nstr.lower()\n```\n\n```{python}\nstr = str + ',there'\nstr.split(',')\n```\n\n```{python}\n'1. This is a string \\'{}\\', and length is {}'.format(str, len(str))\n```\n\n```{python}\n'2. This is a string \\'{0}\\', and length is {1}'.format(str, len(str))\n```\n\n```{python}\n'3. This is a string \\'{a}\\', and length is {b}'.format(a = str, b = len(str))\n```\n\n```{python}\nf'4. This is a string \\'{str}\\', and length is {len(str)}'\n```\n\n```{python}\nfloat = 100/777\n'The result was {r:6.3f}'.format(r=float) # Flaot formatting follows \"{value:width.precision f}\"\n```\n\n## list\n\n```{python}\n# list可以像str一樣操作\nlist = ['one', 'two']\nlist.append('three')\nlist\n```\n\n```{python}\nlist.pop()\nlist\n```\n\n```{python}\nlist.pop(0)\nlist\n```\n\n```{python}\nlist = ['d', 'a', 'c', 'b']\nlist.sort()\nlist\n```\n\n```{python}\nlist.reverse()\nlist\n```\n\n## dict\n\n```{python}\ndict = {'k1':123, 'k2':[0,1,2], 'k3':{'k31':100}}\ndict['k3']['k31']\n```\n\n```{python}\ndict['k4'] = 'string'\ndict\n```\n\n```{python}\ndict.keys()\n```\n\n```{python}\ndict.values()\n```\n\n```{python}\ndict.items()\n```\n\n## tup\n\n```{python}\ntup = ('one', 'two')\ntry:\n    tup[0] = 'new'\nexcept Exception as e:\n    print(e)\n```\n\n## set\n\n```{python}\nlist = [1,1,1,2,2]\nset(list) # 取得唯一\n```\n\n```{python}\nset('Parallel') # 將string取出唯一字母\n```\n\n# I/O files\n\n```{python}\nwith open('file.txt', mode = 'w') as f:\n    f.write('ONE\\nTWO\\nTHREE\\n')\n    f.close()\n```\n\n```{python}\nwith open('file.txt', mode = 'r') as f:\n    f.read()\n```\n\n```{python}\nwith open('file.txt', mode = 'a') as f:\n    f.write('FOUR\\n')\n```\n\n```{python}\nwith open('file.txt', mode = 'r') as f:\n    f.readlines()\n```\n\n# for loop\n\n```{python}\n# tuple unpacking\nlist = [(1,2),(3,4)]\nfor (a,b) in list:\n    print(a,b)\n```\n\n```{python}\ndict = {'k1':'a', 'k2':1}\nfor key, value in dict.items():\n    print(key, value)\n```\n\n```{python}\nfor index, letter in enumerate('abc'):\n    print((index, letter))\n```\n\n```{python}\na = [1,2,3]\nb = ['a','b','c']\nfor item in zip(a,b):\n    print(item)\n```\n\n```{python}\nlist = [x for x in 'word']\nlist\n```\n\n```{python}\nlist = [num**2 for num in range(10) if num%2==0]\nlist\n```\n\n```{python}\nlist = [x*y for x in [1,2] for y in [10,100]]\nlist\n```\n\n# \\*args and \\*\\*kwargs\n\n```{python}\n# return tuple\ndef fun(*numbers):\n    return sum(numbers) * 0.1\nfun(100,200)\n```\n\n```{python}\n# return dict\ndef fun(**kwargs):\n    if 'fruit' in kwargs:\n        print(kwargs['fruit'])\n    else:\n        print('no fruit')\nfun(fruit = 'apple', veggie = 'lettuce')\n```\n\n::: callout-note\n## Question\n\nDefine a function called myfunc that takes in a string, and returns a matching string where every even letter is uppercase, and every odd letter is lowercase.\n:::\n\n``` {.python filename=\"Answer\"}\ndef myfunc(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i].upper()\n        else:\n            new_string += string[i].lower()\n    return new_string\n```\n\n# lambda expression, map and filter\n\n```{python}\nfor i in map(lambda num: num**2, [1,2,3]):\n    print(i)\n```\n\n```{python}\nfor i in filter(lambda num: num%2==1, [1,2,3]):\n    print(i)\n```\n\n# OOP\n\n## Inheritance\n\n```{python}\nclass Circle():\n    pi=3.14\n    def __init__(self, radius=1):\n        self.radius=radius\n    def get_circumference(self):\n        return 2*self.pi*self.radius\n    def get_circumarea(self):\n        return self.pi*self.radius*self.radius\nc = Circle(3)\nc.get_circumference()\nc.get_circumarea()\n```\n\n```{python}\nclass Ball(Circle):\n    def __init__(self, radius):\n        Circle.__init__(self, radius)\n    def get_ballsurface(self):\n        return 4*self.pi*(self.radius**2)\n    def get_ballvolumne(self):\n        return 4/3*self.pi*(self.radius**3)\nb = Ball(3)\nb.get_ballvolumne()\n```\n\n## Polymorphism\n\n```{python}\nclass Animal:\n    def __init__(self, name):# Constructor of the class\n        self.name = name\n\n    def speak(self):# Abstract method, defined by convention only\n        raise NotImplementedError(\"Subclass must implement abstract method\")\n\n\nclass Dog(Animal):\n    \n    def speak(self):\n        return self.name+' says Woof!'\n    \nclass Cat(Animal):\n\n    def speak(self):\n        return self.name+' says Meow!'\n    \nfido = Dog('Fido')\nisis = Cat('Isis')\n\nprint(fido.speak())\nprint(isis.speak())\n```\n\n## Special Methods\n\n```{python}\nclass Book:\n    def __init__(self, title, author, pages):\n        print(\"A book is created\")\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def __str__(self):\n        return \"Title: %s, author: %s, pages: %s\" %(self.title, self.author, self.pages)\n\n    def __len__(self):\n        return self.pages\n\n    def __del__(self):\n        print(\"A book is destroyed\")\nbook = Book(\"Python Rocks!\", \"Jose Portilla\", 159)\n\n#Special Methods\nprint(book)\nprint(len(book))\ndel book\n```\n\n# Modules and Packages\n\n```{python}\n\n```\n\n# \\__name__ and \\__main__\n","srcMarkdownNoYaml":"\n\n[Complete-Python-3-Bootcamp](https://github.com/Pierian-Data/Complete-Python-3-Bootcamp)\n\n# Python資料型態\n\n| Type                     | Description      |\n|--------------------------|------------------|\n| int                      | 1                |\n| float                    | 2.3              |\n| str                      | 'hello'          |\n| list (ordered)           | \\[1, 'hello'\\]   |\n| dict (unordered)         | {'key': 'value'} |\n| tup (ordered, immutable) | (1, 'hello')     |\n| set (unordered, unique)  | {1, 'hello'}     |\n| bool                     | True or False    |\n\n## Number\n\n```{python}\n5 / 2\n5 % 2\n2 ** 3\n```\n\n## 查詢變數資料型態\n\n```{python}\nfloat = 1.0\ntype(float)\n```\n\n## string\n\n```{python}\nstr = 'hello'\nlen(str)\n```\n\n```{python}\nstr[0]\n```\n\n```{python}\nstr[1]\n```\n\n```{python}\nstr[-1]\n```\n\n```{python}\nstr[2:]\n```\n\n```{python}\nstr[:2]\n```\n\n```{python}\nstr[2:4]\n```\n\n```{python}\nstr[::2]\n```\n\n```{python}\nstr[::-1] # 反轉字串\n```\n\n```{python}\nstr.upper()\n```\n\n```{python}\nstr.lower()\n```\n\n```{python}\nstr = str + ',there'\nstr.split(',')\n```\n\n```{python}\n'1. This is a string \\'{}\\', and length is {}'.format(str, len(str))\n```\n\n```{python}\n'2. This is a string \\'{0}\\', and length is {1}'.format(str, len(str))\n```\n\n```{python}\n'3. This is a string \\'{a}\\', and length is {b}'.format(a = str, b = len(str))\n```\n\n```{python}\nf'4. This is a string \\'{str}\\', and length is {len(str)}'\n```\n\n```{python}\nfloat = 100/777\n'The result was {r:6.3f}'.format(r=float) # Flaot formatting follows \"{value:width.precision f}\"\n```\n\n## list\n\n```{python}\n# list可以像str一樣操作\nlist = ['one', 'two']\nlist.append('three')\nlist\n```\n\n```{python}\nlist.pop()\nlist\n```\n\n```{python}\nlist.pop(0)\nlist\n```\n\n```{python}\nlist = ['d', 'a', 'c', 'b']\nlist.sort()\nlist\n```\n\n```{python}\nlist.reverse()\nlist\n```\n\n## dict\n\n```{python}\ndict = {'k1':123, 'k2':[0,1,2], 'k3':{'k31':100}}\ndict['k3']['k31']\n```\n\n```{python}\ndict['k4'] = 'string'\ndict\n```\n\n```{python}\ndict.keys()\n```\n\n```{python}\ndict.values()\n```\n\n```{python}\ndict.items()\n```\n\n## tup\n\n```{python}\ntup = ('one', 'two')\ntry:\n    tup[0] = 'new'\nexcept Exception as e:\n    print(e)\n```\n\n## set\n\n```{python}\nlist = [1,1,1,2,2]\nset(list) # 取得唯一\n```\n\n```{python}\nset('Parallel') # 將string取出唯一字母\n```\n\n# I/O files\n\n```{python}\nwith open('file.txt', mode = 'w') as f:\n    f.write('ONE\\nTWO\\nTHREE\\n')\n    f.close()\n```\n\n```{python}\nwith open('file.txt', mode = 'r') as f:\n    f.read()\n```\n\n```{python}\nwith open('file.txt', mode = 'a') as f:\n    f.write('FOUR\\n')\n```\n\n```{python}\nwith open('file.txt', mode = 'r') as f:\n    f.readlines()\n```\n\n# for loop\n\n```{python}\n# tuple unpacking\nlist = [(1,2),(3,4)]\nfor (a,b) in list:\n    print(a,b)\n```\n\n```{python}\ndict = {'k1':'a', 'k2':1}\nfor key, value in dict.items():\n    print(key, value)\n```\n\n```{python}\nfor index, letter in enumerate('abc'):\n    print((index, letter))\n```\n\n```{python}\na = [1,2,3]\nb = ['a','b','c']\nfor item in zip(a,b):\n    print(item)\n```\n\n```{python}\nlist = [x for x in 'word']\nlist\n```\n\n```{python}\nlist = [num**2 for num in range(10) if num%2==0]\nlist\n```\n\n```{python}\nlist = [x*y for x in [1,2] for y in [10,100]]\nlist\n```\n\n# \\*args and \\*\\*kwargs\n\n```{python}\n# return tuple\ndef fun(*numbers):\n    return sum(numbers) * 0.1\nfun(100,200)\n```\n\n```{python}\n# return dict\ndef fun(**kwargs):\n    if 'fruit' in kwargs:\n        print(kwargs['fruit'])\n    else:\n        print('no fruit')\nfun(fruit = 'apple', veggie = 'lettuce')\n```\n\n::: callout-note\n## Question\n\nDefine a function called myfunc that takes in a string, and returns a matching string where every even letter is uppercase, and every odd letter is lowercase.\n:::\n\n``` {.python filename=\"Answer\"}\ndef myfunc(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i].upper()\n        else:\n            new_string += string[i].lower()\n    return new_string\n```\n\n# lambda expression, map and filter\n\n```{python}\nfor i in map(lambda num: num**2, [1,2,3]):\n    print(i)\n```\n\n```{python}\nfor i in filter(lambda num: num%2==1, [1,2,3]):\n    print(i)\n```\n\n# OOP\n\n## Inheritance\n\n```{python}\nclass Circle():\n    pi=3.14\n    def __init__(self, radius=1):\n        self.radius=radius\n    def get_circumference(self):\n        return 2*self.pi*self.radius\n    def get_circumarea(self):\n        return self.pi*self.radius*self.radius\nc = Circle(3)\nc.get_circumference()\nc.get_circumarea()\n```\n\n```{python}\nclass Ball(Circle):\n    def __init__(self, radius):\n        Circle.__init__(self, radius)\n    def get_ballsurface(self):\n        return 4*self.pi*(self.radius**2)\n    def get_ballvolumne(self):\n        return 4/3*self.pi*(self.radius**3)\nb = Ball(3)\nb.get_ballvolumne()\n```\n\n## Polymorphism\n\n```{python}\nclass Animal:\n    def __init__(self, name):# Constructor of the class\n        self.name = name\n\n    def speak(self):# Abstract method, defined by convention only\n        raise NotImplementedError(\"Subclass must implement abstract method\")\n\n\nclass Dog(Animal):\n    \n    def speak(self):\n        return self.name+' says Woof!'\n    \nclass Cat(Animal):\n\n    def speak(self):\n        return self.name+' says Meow!'\n    \nfido = Dog('Fido')\nisis = Cat('Isis')\n\nprint(fido.speak())\nprint(isis.speak())\n```\n\n## Special Methods\n\n```{python}\nclass Book:\n    def __init__(self, title, author, pages):\n        print(\"A book is created\")\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def __str__(self):\n        return \"Title: %s, author: %s, pages: %s\" %(self.title, self.author, self.pages)\n\n    def __len__(self):\n        return self.pages\n\n    def __del__(self):\n        print(\"A book is destroyed\")\nbook = Book(\"Python Rocks!\", \"Jose Portilla\", 159)\n\n#Special Methods\nprint(book)\nprint(len(book))\ndel book\n```\n\n# Modules and Packages\n\n```{python}\n\n```\n\n# \\__name__ and \\__main__\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"highlight-style":"pygments","number-sections":true,"html-math-method":"katex","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":{"light":"flatly","dark":"darkly"},"code-copy":true,"title-block-banner":true,"title":"Hello, Python","subtitle":"Python 教學","date":"6/13/2023","date-modified":"6/13/2023","date-format":"YYYY-MM-DD","author":"Bennie Liu","abstract":"Python基礎","code-block-border-left":"#31BAE9","toc-title":"文件內容"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}