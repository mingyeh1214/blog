{
  "hash": "50734217cfa6c401de69e6c8898fb497",
  "result": {
    "markdown": "---\ntitle: \"Hello, Python\"\nsubtitle: \"Python 教學\"\ndate: \"6/13/2023\"\ndate-modified: \"6/13/2023\"\ndate-format: \"YYYY-MM-DD\"\nauthor: \"Bennie Liu\"\nabstract: \"Python基礎\"\nhighlight-style: pygments\n\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n    code-link: true\n    code-line-numbers: true\n    toc: true\n    df-print: paged\n    html-math-method: katex\n  # pdf:\n  #   code-line-numbers: true\n  #   geometry: \n  #     - top=30mm\n  #     - left=30mm\n  # docx: default\nexecute:\n  echo: true\n  warning: false\neditor: visual\n---\n\n# Python資料型態\n\n| Type                     | Description      |\n|--------------------------|------------------|\n| int                      | 1                |\n| float                    | 2.3              |\n| str                      | 'hello'          |\n| list (ordered)           | \\[1, 'hello'\\]   |\n| dict (unordered)         | {'key': 'value'} |\n| tup (ordered, immutable) | (1, 'hello')     |\n| set (unordered, unique)  | {1, 'hello'}     |\n| bool                     | True or False    |\n\n## Number\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n5 / 2\n5 % 2\n2 ** 3\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n8\n```\n:::\n:::\n\n\n# 查詢變數資料型態\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfloat = 1.0\ntype(float)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nfloat\n```\n:::\n:::\n\n\n# string\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nstr = 'hello'\nlen(str)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n5\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nstr[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'h'\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nstr[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'e'\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nstr[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'o'\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nstr[2:]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'llo'\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nstr[:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'he'\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nstr[2:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'll'\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nstr[::2]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'hlo'\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nstr[::-1] # 反轉字串\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'olleh'\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nstr.upper()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'HELLO'\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nstr.lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'hello'\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nstr = str + ',there'\nstr.split(',')\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n['hello', 'there']\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n'1. This is a string \\'{}\\', and length is {}'.format(str, len(str))\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n\"1. This is a string 'hello,there', and length is 11\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n'2. This is a string \\'{0}\\', and length is {1}'.format(str, len(str))\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n\"2. This is a string 'hello,there', and length is 11\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n'3. This is a string \\'{a}\\', and length is {b}'.format(a = str, b = len(str))\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n\"3. This is a string 'hello,there', and length is 11\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nf'4. This is a string \\'{str}\\', and length is {len(str)}'\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n\"4. This is a string 'hello,there', and length is 11\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nfloat = 100/777\n'The result was {r:6.3f}'.format(r=float) # Flaot formatting follows \"{value:width.precision f}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'The result was  0.129'\n```\n:::\n:::\n\n\n## list\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# list可以像str一樣操作\nlist = ['one', 'two']\nlist.append('three')\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n['one', 'two', 'three']\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nlist.pop()\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n['one', 'two']\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nlist.pop(0)\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n['two']\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nlist = ['d', 'a', 'c', 'b']\nlist.sort()\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n['a', 'b', 'c', 'd']\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nlist.reverse()\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n['d', 'c', 'b', 'a']\n```\n:::\n:::\n\n\n## dict\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndict = {'k1':123, 'k2':[0,1,2], 'k3':{'k31':100}}\ndict['k3']['k31']\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n100\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndict['k4'] = 'string'\ndict\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n{'k1': 123, 'k2': [0, 1, 2], 'k3': {'k31': 100}, 'k4': 'string'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ndict.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\ndict_keys(['k1', 'k2', 'k3', 'k4'])\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ndict.values()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\ndict_values([123, [0, 1, 2], {'k31': 100}, 'string'])\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ndict.items()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\ndict_items([('k1', 123), ('k2', [0, 1, 2]), ('k3', {'k31': 100}), ('k4', 'string')])\n```\n:::\n:::\n\n\n## tup\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ntup = ('one', 'two')\ntry:\n    tup[0] = 'new'\nexcept Exception as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'tuple' object does not support item assignment\n```\n:::\n:::\n\n\n## set\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nlist = [1,1,1,2,2]\nset(list) # 取得唯一\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n{1, 2}\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nset('Parallel') # 將string取出唯一字母\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n{'P', 'a', 'e', 'l', 'r'}\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}