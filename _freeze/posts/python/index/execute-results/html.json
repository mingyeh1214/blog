{
  "hash": "7b6165c8ba73e48ade18e527a36c7aab",
  "result": {
    "markdown": "---\ntitle: \"Hello, Python\"\nsubtitle: \"Python 教學\"\ndate: \"6/13/2023\"\ndate-modified: \"6/13/2023\"\ndate-format: \"YYYY-MM-DD\"\nauthor: \"Bennie Liu\"\nabstract: \"Python基礎\"\nhighlight-style: pygments\ncode-block-border-left: \"#31BAE9\"\n\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n    code-link: true\n    code-line-numbers: true\n    toc: true\n    toc-title: 文件內容\n    number-sections: true    \n    df-print: paged\n    html-math-method: katex\nexecute:\n  echo: true\n  warning: false\neditor: visual\n---\n\n[Complete-Python-3-Bootcamp](https://github.com/Pierian-Data/Complete-Python-3-Bootcamp)\n\n# Python資料型態\n\n| Type                     | Description      |\n|--------------------------|------------------|\n| int                      | 1                |\n| float                    | 2.3              |\n| str                      | 'hello'          |\n| list (ordered)           | \\[1, 'hello'\\]   |\n| dict (unordered)         | {'key': 'value'} |\n| tup (ordered, immutable) | (1, 'hello')     |\n| set (unordered, unique)  | {1, 'hello'}     |\n| bool                     | True or False    |\n\n## Number\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n5 / 2\n5 % 2\n2 ** 3\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n8\n```\n:::\n:::\n\n\n## 查詢變數資料型態\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfloat = 1.0\ntype(float)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nfloat\n```\n:::\n:::\n\n\n## string\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nstr = 'hello'\nlen(str)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n5\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nstr[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'h'\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nstr[1]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'e'\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nstr[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n'o'\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nstr[2:]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'llo'\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nstr[:2]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'he'\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nstr[2:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'll'\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nstr[::2]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n'hlo'\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nstr[::-1] # 反轉字串\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'olleh'\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nstr.upper()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'HELLO'\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nstr.lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'hello'\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nstr = str + ',there'\nstr.split(',')\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n['hello', 'there']\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n'1. This is a string \\'{}\\', and length is {}'.format(str, len(str))\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n\"1. This is a string 'hello,there', and length is 11\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n'2. This is a string \\'{0}\\', and length is {1}'.format(str, len(str))\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n\"2. This is a string 'hello,there', and length is 11\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n'3. This is a string \\'{a}\\', and length is {b}'.format(a = str, b = len(str))\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n\"3. This is a string 'hello,there', and length is 11\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nf'4. This is a string \\'{str}\\', and length is {len(str)}'\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n\"4. This is a string 'hello,there', and length is 11\"\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nfloat = 100/777\n'The result was {r:6.3f}'.format(r=float) # Flaot formatting follows \"{value:width.precision f}\"\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'The result was  0.129'\n```\n:::\n:::\n\n\n## list\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# list可以像str一樣操作\nlist = ['one', 'two']\nlist.append('three')\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n['one', 'two', 'three']\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nlist.pop()\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n['one', 'two']\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nlist.pop(0)\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n['two']\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nlist = ['d', 'a', 'c', 'b']\nlist.sort()\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n['a', 'b', 'c', 'd']\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nlist.reverse()\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n['d', 'c', 'b', 'a']\n```\n:::\n:::\n\n\n## dict\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndict = {'k1':123, 'k2':[0,1,2], 'k3':{'k31':100}}\ndict['k3']['k31']\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n100\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndict['k4'] = 'string'\ndict\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n{'k1': 123, 'k2': [0, 1, 2], 'k3': {'k31': 100}, 'k4': 'string'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ndict.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\ndict_keys(['k1', 'k2', 'k3', 'k4'])\n```\n:::\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ndict.values()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\ndict_values([123, [0, 1, 2], {'k31': 100}, 'string'])\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ndict.items()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\ndict_items([('k1', 123), ('k2', [0, 1, 2]), ('k3', {'k31': 100}), ('k4', 'string')])\n```\n:::\n:::\n\n\n## tup\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ntup = ('one', 'two')\ntry:\n    tup[0] = 'new'\nexcept Exception as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'tuple' object does not support item assignment\n```\n:::\n:::\n\n\n## set\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nlist = [1,1,1,2,2]\nset(list) # 取得唯一\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n{1, 2}\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nset('Parallel') # 將string取出唯一字母\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n{'P', 'a', 'e', 'l', 'r'}\n```\n:::\n:::\n\n\n# I/O files\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nwith open('file.txt', mode = 'w') as f:\n    f.write('ONE\\nTWO\\nTHREE\\n')\n    f.close()\n```\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nwith open('file.txt', mode = 'r') as f:\n    f.read()\n```\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nwith open('file.txt', mode = 'a') as f:\n    f.write('FOUR\\n')\n```\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nwith open('file.txt', mode = 'r') as f:\n    f.readlines()\n```\n:::\n\n\n# for loop\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n# tuple unpacking\nlist = [(1,2),(3,4)]\nfor (a,b) in list:\n    print(a,b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2\n3 4\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ndict = {'k1':'a', 'k2':1}\nfor key, value in dict.items():\n    print(key, value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nk1 a\nk2 1\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nfor index, letter in enumerate('abc'):\n    print((index, letter))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(0, 'a')\n(1, 'b')\n(2, 'c')\n```\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\na = [1,2,3]\nb = ['a','b','c']\nfor item in zip(a,b):\n    print(item)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1, 'a')\n(2, 'b')\n(3, 'c')\n```\n:::\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nlist = [x for x in 'word']\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n['w', 'o', 'r', 'd']\n```\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nlist = [num**2 for num in range(10) if num%2==0]\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n[0, 4, 16, 36, 64]\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nlist = [x*y for x in [1,2] for y in [10,100]]\nlist\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\n[10, 100, 20, 200]\n```\n:::\n:::\n\n\n# \\*args and \\*\\*kwargs\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\n# return tuple\ndef fun(*numbers):\n    return sum(numbers) * 0.1\nfun(100,200)\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```\n30.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\n# return dict\ndef fun(**kwargs):\n    if 'fruit' in kwargs:\n        print(kwargs['fruit'])\n    else:\n        print('no fruit')\nfun(fruit = 'apple', veggie = 'lettuce')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napple\n```\n:::\n:::\n\n\n::: callout-note\n## Question\n\nDefine a function called myfunc that takes in a string, and returns a matching string where every even letter is uppercase, and every odd letter is lowercase.\n:::\n\n``` {.python filename=\"Answer\"}\ndef myfunc(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i].upper()\n        else:\n            new_string += string[i].lower()\n    return new_string\n```\n\n# lambda expression, map and filter\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\nfor i in map(lambda num: num**2, [1,2,3]):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n4\n9\n```\n:::\n:::\n\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nfor i in filter(lambda num: num%2==1, [1,2,3]):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n3\n```\n:::\n:::\n\n\n# OOP\n\n## Inheritance\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\nclass Circle():\n    pi=3.14\n    def __init__(self, radius=1):\n        self.radius=radius\n    def get_circumference(self):\n        return 2*self.pi*self.radius\n    def get_circumarea(self):\n        return self.pi*self.radius*self.radius\nc = Circle(3)\nc.get_circumference()\nc.get_circumarea()\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n28.259999999999998\n```\n:::\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nclass Ball(Circle):\n    def __init__(self, radius):\n        Circle.__init__(self, radius)\n    def get_ballsurface(self):\n        return 4*self.pi*(self.radius**2)\n    def get_ballvolumne(self):\n        return 4/3*self.pi*(self.radius**3)\nb = Ball(3)\nb.get_ballvolumne()\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n113.03999999999999\n```\n:::\n:::\n\n\n## Polymorphism\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\nclass Animal:\n    def __init__(self, name):# Constructor of the class\n        self.name = name\n\n    def speak(self):# Abstract method, defined by convention only\n        raise NotImplementedError(\"Subclass must implement abstract method\")\n\n\nclass Dog(Animal):\n    \n    def speak(self):\n        return self.name+' says Woof!'\n    \nclass Cat(Animal):\n\n    def speak(self):\n        return self.name+' says Meow!'\n    \nfido = Dog('Fido')\nisis = Cat('Isis')\n\nprint(fido.speak())\nprint(isis.speak())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFido says Woof!\nIsis says Meow!\n```\n:::\n:::\n\n\n## Special Methods\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\nclass Book:\n    def __init__(self, title, author, pages):\n        print(\"A book is created\")\n        self.title = title\n        self.author = author\n        self.pages = pages\n\n    def __str__(self):\n        return \"Title: %s, author: %s, pages: %s\" %(self.title, self.author, self.pages)\n\n    def __len__(self):\n        return self.pages\n\n    def __del__(self):\n        print(\"A book is destroyed\")\nbook = Book(\"Python Rocks!\", \"Jose Portilla\", 159)\n\n#Special Methods\nprint(book)\nprint(len(book))\ndel book\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA book is created\nTitle: Python Rocks!, author: Jose Portilla, pages: 159\n159\nA book is destroyed\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}